// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeldingControl.Data.Infrastructure;

namespace WeldingControl.Data.Infrastructure.Migrations
{
    [DbContext(typeof(DomainContext))]
    [Migration("20200505205943_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:citext", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WeldingControl.Data.Domain.AdditionalMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("Varchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_additional_materials");

                    b.ToTable("additional_materials");
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ConnectionForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'4', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("Varchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_connection_forms");

                    b.ToTable("connection_forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "P",
                            Description = "Пластина"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "T",
                            Description = "Труба"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "Rb",
                            Description = "Стержень"
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'5', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("Date");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnName("employment_date")
                        .HasColumnType("Date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("Varchar");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnName("identification")
                        .HasColumnType("Varchar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("Varchar");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnName("middle_name")
                        .HasColumnType("Varchar");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("Integer");

                    b.Property<int>("Position")
                        .HasColumnName("position")
                        .HasColumnType("Integer");

                    b.Property<string>("Stamp")
                        .IsRequired()
                        .HasColumnName("stamp")
                        .HasColumnType("Varchar");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("Varchar")
                        .HasMaxLength(30);

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_employees_organization_id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("ix_employees_user_name");

                    b.ToTable("employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1992, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentDate = new DateTime(2012, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Денис",
                            Identification = "КВ 2291021",
                            LastName = "Гончаров",
                            MiddleName = "Геннадьевич",
                            OrganizationId = 2,
                            Position = 1,
                            Stamp = "22",
                            UserName = "dgoncharov"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1986, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentDate = new DateTime(2007, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Александр",
                            Identification = "КВ 1789243",
                            LastName = "Лозиков",
                            MiddleName = "Евгеньевич",
                            OrganizationId = 2,
                            Position = 1,
                            Stamp = "Л4",
                            UserName = "alozikov"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1988, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentDate = new DateTime(2006, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Алексей",
                            Identification = "КВ 1993091",
                            LastName = "Пусовский",
                            MiddleName = "Иванович",
                            OrganizationId = 2,
                            Position = 1,
                            Stamp = "П8",
                            UserName = "apusovsky"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1990, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmploymentDate = new DateTime(2009, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Семен",
                            Identification = "КВ 1845912",
                            LastName = "Зайченко",
                            MiddleName = "Сергеевич",
                            OrganizationId = 2,
                            Position = 2,
                            Stamp = "22",
                            UserName = "szaichenko"
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'4', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Decision")
                        .HasColumnName("decision")
                        .HasColumnType("Varchar")
                        .HasMaxLength(10000);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id")
                        .HasColumnType("Integer");

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnName("expires_date")
                        .HasColumnType("Date");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnName("issue_date")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificates");

                    b.HasIndex("EmployeeId")
                        .HasName("ix_employee_certificates_employee_id");

                    b.ToTable("employee_certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Decision = "Допушен к 141 на объектах технологического оборудованияи технологических трубопроводов, паровых котлов без права работы на белорусской АЭС",
                            EmployeeId = 2,
                            ExpiresDate = new DateTime(2020, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2019, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Decision = "Допушен к 111 на объектах технологического оборудованияи технологических трубопроводов, паровых котлов без права работы на белорусской АЭС",
                            EmployeeId = 1,
                            ExpiresDate = new DateTime(2020, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2019, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Decision = "Допушен к 141 на объектах технологического оборудованияи технологических трубопроводов, паровых котлов без права работы на белорусской АЭС",
                            EmployeeId = 3,
                            ExpiresDate = new DateTime(2020, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueDate = new DateTime(2019, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateAdditionalMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdditionalMaterialId")
                        .HasColumnName("additional_material_id")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeCertificateId")
                        .HasColumnName("employee_certificate_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificate_additional_materials");

                    b.HasIndex("AdditionalMaterialId")
                        .HasName("ix_employee_certificate_additional_materials_additional_materi~");

                    b.HasIndex("EmployeeCertificateId")
                        .HasName("ix_employee_certificate_additional_materials_employee_certific~");

                    b.ToTable("employee_certificate_additional_materials");
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateConnectionForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'7', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConnectionFormId")
                        .HasColumnName("connection_form_id")
                        .HasColumnType("Integer");

                    b.Property<int>("EmployeeCertificateId")
                        .HasColumnName("employee_certificate_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificate_connection_forms");

                    b.HasIndex("ConnectionFormId")
                        .HasName("ix_employee_certificate_connection_forms_connection_form_id");

                    b.HasIndex("EmployeeCertificateId")
                        .HasName("ix_employee_certificate_connection_forms_employee_certificate_~");

                    b.ToTable("employee_certificate_connection_forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConnectionFormId = 1,
                            EmployeeCertificateId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConnectionFormId = 2,
                            EmployeeCertificateId = 1
                        },
                        new
                        {
                            Id = 3,
                            ConnectionFormId = 1,
                            EmployeeCertificateId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConnectionFormId = 2,
                            EmployeeCertificateId = 2
                        },
                        new
                        {
                            Id = 5,
                            ConnectionFormId = 1,
                            EmployeeCertificateId = 3
                        },
                        new
                        {
                            Id = 6,
                            ConnectionFormId = 2,
                            EmployeeCertificateId = 3
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateFillerMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'11', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmployeeCertificateId")
                        .HasColumnName("employee_certificate_id")
                        .HasColumnType("Integer");

                    b.Property<int>("FillerMaterialId")
                        .HasColumnName("filler_material_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificate_filler_materials");

                    b.HasIndex("EmployeeCertificateId")
                        .HasName("ix_employee_certificate_filler_materials_employee_certificate_~");

                    b.HasIndex("FillerMaterialId")
                        .HasName("ix_employee_certificate_filler_materials_filler_material_id");

                    b.ToTable("employee_certificate_filler_materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeCertificateId = 1,
                            FillerMaterialId = 1
                        },
                        new
                        {
                            Id = 2,
                            EmployeeCertificateId = 1,
                            FillerMaterialId = 2
                        },
                        new
                        {
                            Id = 3,
                            EmployeeCertificateId = 2,
                            FillerMaterialId = 3
                        },
                        new
                        {
                            Id = 4,
                            EmployeeCertificateId = 2,
                            FillerMaterialId = 4
                        },
                        new
                        {
                            Id = 5,
                            EmployeeCertificateId = 2,
                            FillerMaterialId = 5
                        },
                        new
                        {
                            Id = 6,
                            EmployeeCertificateId = 2,
                            FillerMaterialId = 6
                        },
                        new
                        {
                            Id = 7,
                            EmployeeCertificateId = 2,
                            FillerMaterialId = 7
                        },
                        new
                        {
                            Id = 8,
                            EmployeeCertificateId = 2,
                            FillerMaterialId = 8
                        },
                        new
                        {
                            Id = 9,
                            EmployeeCertificateId = 3,
                            FillerMaterialId = 1
                        },
                        new
                        {
                            Id = 10,
                            EmployeeCertificateId = 3,
                            FillerMaterialId = 2
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateMainMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'10', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmployeeCertificateId")
                        .HasColumnName("employee_certificate_id")
                        .HasColumnType("Integer");

                    b.Property<int>("MainMaterialId")
                        .HasColumnName("main_material_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificate_main_materials");

                    b.HasIndex("EmployeeCertificateId")
                        .HasName("ix_employee_certificate_main_materials_employee_certificate_id");

                    b.HasIndex("MainMaterialId")
                        .HasName("ix_employee_certificate_main_materials_main_material_id");

                    b.ToTable("employee_certificate_main_materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeCertificateId = 1,
                            MainMaterialId = 1
                        },
                        new
                        {
                            Id = 2,
                            EmployeeCertificateId = 1,
                            MainMaterialId = 2
                        },
                        new
                        {
                            Id = 3,
                            EmployeeCertificateId = 1,
                            MainMaterialId = 3
                        },
                        new
                        {
                            Id = 4,
                            EmployeeCertificateId = 2,
                            MainMaterialId = 1
                        },
                        new
                        {
                            Id = 5,
                            EmployeeCertificateId = 2,
                            MainMaterialId = 2
                        },
                        new
                        {
                            Id = 6,
                            EmployeeCertificateId = 2,
                            MainMaterialId = 3
                        },
                        new
                        {
                            Id = 7,
                            EmployeeCertificateId = 3,
                            MainMaterialId = 1
                        },
                        new
                        {
                            Id = 8,
                            EmployeeCertificateId = 3,
                            MainMaterialId = 2
                        },
                        new
                        {
                            Id = 9,
                            EmployeeCertificateId = 3,
                            MainMaterialId = 3
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateShieldingGas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmployeeCertificateId")
                        .HasColumnName("employee_certificate_id")
                        .HasColumnType("Integer");

                    b.Property<int>("ShieldingGasId")
                        .HasColumnName("shielding_gas_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificate_shielding_gases");

                    b.HasIndex("EmployeeCertificateId")
                        .HasName("ix_employee_certificate_shielding_gases_employee_certificate_id");

                    b.HasIndex("ShieldingGasId")
                        .HasName("ix_employee_certificate_shielding_gases_shielding_gas_id");

                    b.ToTable("employee_certificate_shielding_gases");
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateWeldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'7', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmployeeCertificateId")
                        .HasColumnName("employee_certificate_id")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldTypeId")
                        .HasColumnName("weld_type_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificate_weld_types");

                    b.HasIndex("EmployeeCertificateId")
                        .HasName("ix_employee_certificate_weld_types_employee_certificate_id");

                    b.HasIndex("WeldTypeId")
                        .HasName("ix_employee_certificate_weld_types_weld_type_id");

                    b.ToTable("employee_certificate_weld_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeCertificateId = 1,
                            WeldTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            EmployeeCertificateId = 1,
                            WeldTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            EmployeeCertificateId = 2,
                            WeldTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            EmployeeCertificateId = 2,
                            WeldTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            EmployeeCertificateId = 3,
                            WeldTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            EmployeeCertificateId = 3,
                            WeldTypeId = 2
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateWeldingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmployeeCertificateId")
                        .HasColumnName("employee_certificate_id")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldingMaterialId")
                        .HasColumnName("welding_material_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificate_welding_materials");

                    b.HasIndex("EmployeeCertificateId")
                        .HasName("ix_employee_certificate_welding_materials_employee_certificate~");

                    b.HasIndex("WeldingMaterialId")
                        .HasName("ix_employee_certificate_welding_materials_welding_material_id");

                    b.ToTable("employee_certificate_welding_materials");
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateWeldingPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'22', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmployeeCertificateId")
                        .HasColumnName("employee_certificate_id")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldingPositionId")
                        .HasColumnName("welding_position_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificate_welding_positions");

                    b.HasIndex("EmployeeCertificateId")
                        .HasName("ix_employee_certificate_welding_positions_employee_certificate~");

                    b.HasIndex("WeldingPositionId")
                        .HasName("ix_employee_certificate_welding_positions_welding_position_id");

                    b.ToTable("employee_certificate_welding_positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeCertificateId = 1,
                            WeldingPositionId = 1
                        },
                        new
                        {
                            Id = 2,
                            EmployeeCertificateId = 1,
                            WeldingPositionId = 5
                        },
                        new
                        {
                            Id = 3,
                            EmployeeCertificateId = 1,
                            WeldingPositionId = 2
                        },
                        new
                        {
                            Id = 4,
                            EmployeeCertificateId = 1,
                            WeldingPositionId = 6
                        },
                        new
                        {
                            Id = 5,
                            EmployeeCertificateId = 1,
                            WeldingPositionId = 4
                        },
                        new
                        {
                            Id = 6,
                            EmployeeCertificateId = 1,
                            WeldingPositionId = 8
                        },
                        new
                        {
                            Id = 7,
                            EmployeeCertificateId = 1,
                            WeldingPositionId = 10
                        },
                        new
                        {
                            Id = 8,
                            EmployeeCertificateId = 2,
                            WeldingPositionId = 1
                        },
                        new
                        {
                            Id = 9,
                            EmployeeCertificateId = 2,
                            WeldingPositionId = 5
                        },
                        new
                        {
                            Id = 10,
                            EmployeeCertificateId = 2,
                            WeldingPositionId = 2
                        },
                        new
                        {
                            Id = 11,
                            EmployeeCertificateId = 2,
                            WeldingPositionId = 6
                        },
                        new
                        {
                            Id = 12,
                            EmployeeCertificateId = 2,
                            WeldingPositionId = 4
                        },
                        new
                        {
                            Id = 13,
                            EmployeeCertificateId = 2,
                            WeldingPositionId = 8
                        },
                        new
                        {
                            Id = 14,
                            EmployeeCertificateId = 2,
                            WeldingPositionId = 10
                        },
                        new
                        {
                            Id = 15,
                            EmployeeCertificateId = 3,
                            WeldingPositionId = 1
                        },
                        new
                        {
                            Id = 16,
                            EmployeeCertificateId = 3,
                            WeldingPositionId = 5
                        },
                        new
                        {
                            Id = 17,
                            EmployeeCertificateId = 3,
                            WeldingPositionId = 2
                        },
                        new
                        {
                            Id = 18,
                            EmployeeCertificateId = 3,
                            WeldingPositionId = 6
                        },
                        new
                        {
                            Id = 19,
                            EmployeeCertificateId = 3,
                            WeldingPositionId = 4
                        },
                        new
                        {
                            Id = 20,
                            EmployeeCertificateId = 3,
                            WeldingPositionId = 8
                        },
                        new
                        {
                            Id = 21,
                            EmployeeCertificateId = 3,
                            WeldingPositionId = 10
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateWeldingProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'4', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmployeeCertificateId")
                        .HasColumnName("employee_certificate_id")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldingProcessId")
                        .HasColumnName("welding_process_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificate_welding_processes");

                    b.HasIndex("EmployeeCertificateId")
                        .HasName("ix_employee_certificate_welding_processes_employee_certificate~");

                    b.HasIndex("WeldingProcessId")
                        .HasName("ix_employee_certificate_welding_processes_welding_process_id");

                    b.ToTable("employee_certificate_welding_processes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeCertificateId = 1,
                            WeldingProcessId = 8
                        },
                        new
                        {
                            Id = 2,
                            EmployeeCertificateId = 2,
                            WeldingProcessId = 1
                        },
                        new
                        {
                            Id = 3,
                            EmployeeCertificateId = 3,
                            WeldingProcessId = 8
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateWeldingTechnique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'19', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmployeeCertificateId")
                        .HasColumnName("employee_certificate_id")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldTypeId")
                        .HasColumnName("weld_type_id")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldingTechniqueId")
                        .HasColumnName("welding_technique_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_employee_certificate_welding_techniques");

                    b.HasIndex("EmployeeCertificateId")
                        .HasName("ix_employee_certificate_welding_techniques_employee_certificat~");

                    b.HasIndex("WeldTypeId")
                        .HasName("ix_employee_certificate_welding_techniques_weld_type_id");

                    b.HasIndex("WeldingTechniqueId")
                        .HasName("ix_employee_certificate_welding_techniques_welding_technique_id");

                    b.ToTable("employee_certificate_welding_techniques");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeCertificateId = 1,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 6
                        },
                        new
                        {
                            Id = 2,
                            EmployeeCertificateId = 1,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 3
                        },
                        new
                        {
                            Id = 3,
                            EmployeeCertificateId = 1,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 5
                        },
                        new
                        {
                            Id = 4,
                            EmployeeCertificateId = 1,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 1
                        },
                        new
                        {
                            Id = 5,
                            EmployeeCertificateId = 1,
                            WeldTypeId = 2,
                            WeldingTechniqueId = 7
                        },
                        new
                        {
                            Id = 6,
                            EmployeeCertificateId = 1,
                            WeldTypeId = 2,
                            WeldingTechniqueId = 4
                        },
                        new
                        {
                            Id = 7,
                            EmployeeCertificateId = 2,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 6
                        },
                        new
                        {
                            Id = 8,
                            EmployeeCertificateId = 2,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 3
                        },
                        new
                        {
                            Id = 9,
                            EmployeeCertificateId = 2,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 5
                        },
                        new
                        {
                            Id = 10,
                            EmployeeCertificateId = 2,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 1
                        },
                        new
                        {
                            Id = 11,
                            EmployeeCertificateId = 2,
                            WeldTypeId = 2,
                            WeldingTechniqueId = 7
                        },
                        new
                        {
                            Id = 12,
                            EmployeeCertificateId = 2,
                            WeldTypeId = 2,
                            WeldingTechniqueId = 4
                        },
                        new
                        {
                            Id = 13,
                            EmployeeCertificateId = 3,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 6
                        },
                        new
                        {
                            Id = 14,
                            EmployeeCertificateId = 3,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 3
                        },
                        new
                        {
                            Id = 15,
                            EmployeeCertificateId = 3,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 5
                        },
                        new
                        {
                            Id = 16,
                            EmployeeCertificateId = 3,
                            WeldTypeId = 1,
                            WeldingTechniqueId = 1
                        },
                        new
                        {
                            Id = 17,
                            EmployeeCertificateId = 3,
                            WeldTypeId = 2,
                            WeldingTechniqueId = 7
                        },
                        new
                        {
                            Id = 18,
                            EmployeeCertificateId = 3,
                            WeldTypeId = 2,
                            WeldingTechniqueId = 4
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.FillerMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'9', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("Varchar");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_filler_materials");

                    b.ToTable("filler_materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "S"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "M"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "A"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "RA"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "RB"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "RC"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "RR"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "R"
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.MainMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'4', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.Property<int>("Group")
                        .HasColumnName("group")
                        .HasColumnType("Integer");

                    b.Property<int>("SubGroup")
                        .HasColumnName("sub_group")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_main_materials");

                    b.ToTable("main_materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Стали с установленным минимальным пределом текучести (до 275)",
                            Group = 1,
                            SubGroup = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Стали с установленным минимальным пределом текучести (от 275 до 360)",
                            Group = 1,
                            SubGroup = 4
                        },
                        new
                        {
                            Id = 3,
                            Description = "Стали с улучшенной коррозионной стойкостью по отношению к кислороду",
                            Group = 1,
                            SubGroup = 4
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.ToTable("organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ООО \"Протос\""
                        },
                        new
                        {
                            Id = 2,
                            Name = "Филиал ММУ-1 ОАО \"Могилевтехмонтаж\""
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Current")
                        .HasColumnName("current")
                        .HasColumnType("double precision");

                    b.Property<int>("RunId")
                        .HasColumnName("run_id")
                        .HasColumnType("Integer");

                    b.Property<double>("Voltage")
                        .HasColumnName("voltage")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasName("pk_measurements");

                    b.HasIndex("RunId")
                        .HasName("ix_measurements_run_id");

                    b.ToTable("measurements");
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("Varchar");

                    b.Property<string>("CreationDate")
                        .IsRequired()
                        .HasColumnName("creation_date")
                        .HasColumnType("Varchar");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_products_organization_id");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "T24",
                            CreationDate = "2020-04-01 00:00:00",
                            Description = "Поперечная труба",
                            OrganizationId = 2
                        },
                        new
                        {
                            Id = 2,
                            Code = "T51",
                            CreationDate = "2020-04-01 00:00:00",
                            Description = "Изогнутая труба",
                            OrganizationId = 2
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.Run", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("Date");

                    b.Property<int>("EmployeeWeldingTaskId")
                        .HasColumnName("employee_welding_task_id")
                        .HasColumnType("Integer");

                    b.Property<DateTime>("WorkStart")
                        .HasColumnName("work_start")
                        .HasColumnType("Date");

                    b.Property<int>("WorkTime")
                        .HasColumnName("work_time")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_runs");

                    b.HasIndex("EmployeeWeldingTaskId")
                        .HasName("ix_runs_employee_welding_task_id");

                    b.ToTable("runs");
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.Weld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_welds");

                    b.HasIndex("ProductId")
                        .HasName("ix_welds_product_id");

                    b.ToTable("welds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.WeldingTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnName("completion_date")
                        .HasColumnType("Date");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("Date");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.Property<int>("EquipmentId")
                        .HasColumnName("equipment_id")
                        .HasColumnType("Integer");

                    b.Property<int>("MasterId")
                        .HasColumnName("master_id")
                        .HasColumnType("Integer");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldId")
                        .HasColumnName("weld_id")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldingInstructionId")
                        .HasColumnName("welding_instruction_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_welding_tasks");

                    b.HasIndex("EquipmentId")
                        .HasName("ix_welding_tasks_equipment_id");

                    b.HasIndex("MasterId")
                        .HasName("ix_welding_tasks_master_id");

                    b.HasIndex("WeldId")
                        .HasName("ix_welding_tasks_weld_id");

                    b.HasIndex("WeldingInstructionId")
                        .HasName("ix_welding_tasks_welding_instruction_id");

                    b.ToTable("welding_tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2020, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Выполнить сварку поперечной трубы",
                            EquipmentId = 1,
                            MasterId = 4,
                            Status = 1,
                            WeldId = 1,
                            WeldingInstructionId = 1
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.WeldingTaskWelder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("WelderId")
                        .HasColumnName("welder_id")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldingTaskId")
                        .HasColumnName("welding_task_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_welding_task_welders");

                    b.HasIndex("WelderId")
                        .HasName("ix_welding_task_welders_welder_id");

                    b.HasIndex("WeldingTaskId")
                        .HasName("ix_welding_task_welders_welding_task_id");

                    b.ToTable("welding_task_welders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            WelderId = 2,
                            WeldingTaskId = 1
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ShieldingGas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("Varchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_shielding_gases");

                    b.ToTable("shielding_gases");
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("Varchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_weld_types");

                    b.ToTable("weld_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "BW",
                            Description = "Стыковой шов"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "FW",
                            Description = "Угловой шов"
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingInstructionDomain.WeldParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AdditionalMaterialId")
                        .HasColumnName("additional_material_id")
                        .HasColumnType("Integer");

                    b.Property<int?>("ConnectionFormId")
                        .HasColumnName("connection_form_id")
                        .HasColumnType("Integer");

                    b.Property<int?>("FillerMaterialId")
                        .HasColumnName("filler_material_id")
                        .HasColumnType("Integer");

                    b.Property<int?>("MainMaterialId")
                        .HasColumnName("main_material_id")
                        .HasColumnType("Integer");

                    b.Property<int?>("ShieldingGasId")
                        .HasColumnName("shielding_gas_id")
                        .HasColumnType("Integer");

                    b.Property<int?>("WeldTypeId")
                        .HasColumnName("weld_type_id")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldingInstructionId")
                        .HasColumnName("welding_instruction_id")
                        .HasColumnType("Integer");

                    b.Property<int?>("WeldingMaterialId")
                        .HasColumnName("welding_material_id")
                        .HasColumnType("Integer");

                    b.Property<int?>("WeldingPositionId")
                        .HasColumnName("welding_position_id")
                        .HasColumnType("Integer");

                    b.Property<int?>("WeldingProcessId")
                        .HasColumnName("welding_process_id")
                        .HasColumnType("Integer");

                    b.Property<int?>("WeldingTechniqueId")
                        .HasColumnName("welding_technique_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_weld_params");

                    b.HasIndex("AdditionalMaterialId")
                        .HasName("ix_weld_params_additional_material_id");

                    b.HasIndex("ConnectionFormId")
                        .HasName("ix_weld_params_connection_form_id");

                    b.HasIndex("FillerMaterialId")
                        .HasName("ix_weld_params_filler_material_id");

                    b.HasIndex("MainMaterialId")
                        .HasName("ix_weld_params_main_material_id");

                    b.HasIndex("ShieldingGasId")
                        .HasName("ix_weld_params_shielding_gas_id");

                    b.HasIndex("WeldTypeId")
                        .HasName("ix_weld_params_weld_type_id");

                    b.HasIndex("WeldingInstructionId")
                        .HasName("ix_weld_params_welding_instruction_id");

                    b.HasIndex("WeldingMaterialId")
                        .HasName("ix_weld_params_welding_material_id");

                    b.HasIndex("WeldingPositionId")
                        .HasName("ix_weld_params_welding_position_id");

                    b.HasIndex("WeldingProcessId")
                        .HasName("ix_weld_params_welding_process_id");

                    b.HasIndex("WeldingTechniqueId")
                        .HasName("ix_weld_params_welding_technique_id");

                    b.ToTable("weld_params");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConnectionFormId = 2,
                            MainMaterialId = 1,
                            WeldTypeId = 1,
                            WeldingInstructionId = 1,
                            WeldingPositionId = 1,
                            WeldingProcessId = 1
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingInstructionDomain.WeldingInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("creation_date")
                        .HasColumnType("Date");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_welding_instructions");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_welding_instructions_organization_id");

                    b.ToTable("welding_instructions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2019, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrganizationId = 2
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingMachineDomain.Recorder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnName("identifier")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_recorders");

                    b.ToTable("recorders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Identifier = "00001"
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingMachineDomain.WeldingMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnName("identification")
                        .HasColumnType("Varchar");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("Integer");

                    b.Property<int>("RecorderId")
                        .HasColumnName("recorder_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_welding_machines");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_welding_machines_organization_id");

                    b.HasIndex("RecorderId")
                        .HasName("ix_welding_machines_recorder_id");

                    b.ToTable("welding_machines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Identification = "KZ103492 (984)",
                            OrganizationId = 2,
                            RecorderId = 1
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingMachineDomain.WeldingMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EquipmentId")
                        .HasColumnName("equipment_id")
                        .HasColumnType("Integer");

                    b.Property<int>("WeldingProcessId")
                        .HasColumnName("welding_process_id")
                        .HasColumnType("Integer");

                    b.HasKey("Id")
                        .HasName("pk_welding_modes");

                    b.HasIndex("EquipmentId")
                        .HasName("ix_welding_modes_equipment_id");

                    b.HasIndex("WeldingProcessId")
                        .HasName("ix_welding_modes_welding_process_id");

                    b.ToTable("welding_modes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EquipmentId = 1,
                            WeldingProcessId = 1
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("Varchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_welding_materials");

                    b.ToTable("welding_materials");
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'13', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("Varchar");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("Varchar");

                    b.Property<int>("ConnectionFormId")
                        .HasColumnName("connection_form_id")
                        .HasColumnType("Integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_welding_positions");

                    b.HasIndex("ConnectionFormId")
                        .HasName("ix_welding_positions_connection_form_id");

                    b.ToTable("welding_positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "PA",
                            Code = "С1, У1-1",
                            ConnectionFormId = 1,
                            Description = "Нижнее стыковой и в \"лодочку\""
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "PC",
                            Code = "С3",
                            ConnectionFormId = 1,
                            Description = "Горизонтальное стыковое"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "PF",
                            Code = "С2-1, У2-1",
                            ConnectionFormId = 1,
                            Description = "Вертикольное снизу вверх стыковое, тавровое"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "PE",
                            Code = "С4",
                            ConnectionFormId = 1,
                            Description = "Потолочное стыковое"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "PB",
                            Code = "У1-2",
                            ConnectionFormId = 1,
                            Description = "Нижнее тавровое"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "PD",
                            Code = "У4-2",
                            ConnectionFormId = 1,
                            Description = "Потолочное тавровое"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "PA",
                            Code = "С1, У2-1",
                            ConnectionFormId = 1,
                            Description = "Нижнее стыковой и в \"угол\" (труба поворотная)"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "PF",
                            Code = "С5-1, У5-1",
                            ConnectionFormId = 1,
                            Description = "Вертикольное снизу вверх стыковое, тавровое - труба неповоротнпя"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "PC",
                            Code = "С3",
                            ConnectionFormId = 1,
                            Description = "Горизонтальное стыковое"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "H-L045",
                            ConnectionFormId = 1,
                            Description = "наклонное под углом от 10 до 45 - труба неповоротная (сварка снизу вверх)"
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "PB",
                            Code = "У1-2-1",
                            ConnectionFormId = 1,
                            Description = "Нижнее \"в угол\""
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "PD",
                            Code = "У4-2",
                            ConnectionFormId = 1,
                            Description = "Потолочное \"в угол\""
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'12', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnName("abbreviation")
                        .HasColumnType("Varchar");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("Varchar");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_welding_processes");

                    b.ToTable("welding_processes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "SMAW",
                            Code = "111",
                            Description = "Дуговая сварка плавящимся покрытым электродом"
                        },
                        new
                        {
                            Id = 2,
                            Code = "114",
                            Description = "Дуговая сварка порошковой проволокой"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "SAW",
                            Code = "121",
                            Description = "Дуговая сварка под флюсом проволочным электродом"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "MIG",
                            Code = "131",
                            Description = "Дуговая сварка в инертном газее плавящимся электродом"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "MAG",
                            Code = "135",
                            Description = "Дуговая сварка в инертном газее плавящимся электродом"
                        },
                        new
                        {
                            Id = 6,
                            Code = "136",
                            Description = "Дуговая сварка в активном газе порошковой проволокой"
                        },
                        new
                        {
                            Id = 7,
                            Code = "137",
                            Description = "Дуговая сварка в инертном газе порошковой проволокой"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "TIG",
                            Code = "141",
                            Description = "Дуговая сварка в инертном газе польфрамовым электродом"
                        },
                        new
                        {
                            Id = 9,
                            Code = "15",
                            Description = "Плазменная сварка"
                        },
                        new
                        {
                            Id = 10,
                            Code = "24",
                            Description = "Стыковая сварка оплавлением"
                        },
                        new
                        {
                            Id = 11,
                            Code = "311",
                            Description = "Ацетиленокислородная сварка"
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingTechnique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("Integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'8', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("Varchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("Varchar");

                    b.HasKey("Id")
                        .HasName("pk_welding_techniques");

                    b.ToTable("welding_techniques");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "bs",
                            Description = "Двухсторонняя сварка"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "lw,rw",
                            Description = "Сварка левым способом, сварка правым способом"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "mb",
                            Description = "Сварка с защитой сварочной ванны"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "ml",
                            Description = "Многослойная сварка"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "nb",
                            Description = "Сварка без защиты сварочной ванны"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "ss",
                            Description = "Односторонняя сварка"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "sl",
                            Description = "Однослойная сварка"
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.Employee", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.Organization", "Organization")
                        .WithMany("Employees")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_employees_organizations_organization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.Employee", "Employee")
                        .WithMany("Certificates")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_employee_certificates_employees_employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WeldingControl.Data.Domain.Utility.Param", "PipeOuterDiameter", b1 =>
                        {
                            b1.Property<int>("EmployeeCertificateId")
                                .HasColumnName("id")
                                .HasColumnType("Integer");

                            b1.Property<double?>("Max")
                                .HasColumnName("pipe_outer_diameter_max")
                                .HasColumnType("double precision");

                            b1.Property<double>("Min")
                                .HasColumnName("pipe_outer_diameter_min")
                                .HasColumnType("double precision");

                            b1.HasKey("EmployeeCertificateId")
                                .HasName("pk_employee_certificates");

                            b1.ToTable("employee_certificates");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeCertificateId")
                                .HasConstraintName("fk_employee_certificates_employee_certificates_id");

                            b1.HasData(
                                new
                                {
                                    EmployeeCertificateId = 1,
                                    Min = 28.5
                                },
                                new
                                {
                                    EmployeeCertificateId = 2,
                                    Min = 28.5
                                },
                                new
                                {
                                    EmployeeCertificateId = 3,
                                    Min = 28.5
                                });
                        });

                    b.OwnsOne("WeldingControl.Data.Domain.Utility.Param", "Thickness", b1 =>
                        {
                            b1.Property<int>("EmployeeCertificateId")
                                .HasColumnName("id")
                                .HasColumnType("Integer");

                            b1.Property<double?>("Max")
                                .HasColumnName("thickness_max")
                                .HasColumnType("double precision");

                            b1.Property<double>("Min")
                                .HasColumnName("thickness_min")
                                .HasColumnType("double precision");

                            b1.HasKey("EmployeeCertificateId")
                                .HasName("pk_employee_certificates");

                            b1.ToTable("employee_certificates");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeCertificateId")
                                .HasConstraintName("fk_employee_certificates_employee_certificates_id");

                            b1.HasData(
                                new
                                {
                                    EmployeeCertificateId = 1,
                                    Max = 7.0,
                                    Min = 3.0
                                },
                                new
                                {
                                    EmployeeCertificateId = 2,
                                    Max = 9.0,
                                    Min = 3.0
                                },
                                new
                                {
                                    EmployeeCertificateId = 3,
                                    Max = 7.0,
                                    Min = 3.0
                                });
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateAdditionalMaterial", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.AdditionalMaterial", "AdditionalMaterial")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("AdditionalMaterialId")
                        .HasConstraintName("fk_employee_certificate_additional_materials_additional_materi~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", "Certificate")
                        .WithMany("AdditionalMaterials")
                        .HasForeignKey("EmployeeCertificateId")
                        .HasConstraintName("fk_employee_certificate_additional_materials_employee_certific~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateConnectionForm", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.ConnectionForm", "ConnectionForm")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("ConnectionFormId")
                        .HasConstraintName("fk_employee_certificate_connection_forms_connection_forms_conn~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", "Certificate")
                        .WithMany("ConnectionForms")
                        .HasForeignKey("EmployeeCertificateId")
                        .HasConstraintName("fk_employee_certificate_connection_forms_employee_certificates~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateFillerMaterial", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", "Certificate")
                        .WithMany("FillerMaterials")
                        .HasForeignKey("EmployeeCertificateId")
                        .HasConstraintName("fk_employee_certificate_filler_materials_employee_certificates~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.FillerMaterial", "FillerMaterial")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("FillerMaterialId")
                        .HasConstraintName("fk_employee_certificate_filler_materials_filler_materials_fille~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateMainMaterial", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", "Certificate")
                        .WithMany("MainMaterials")
                        .HasForeignKey("EmployeeCertificateId")
                        .HasConstraintName("fk_employee_certificate_main_materials_employee_certificates_e~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.MainMaterial", "MainMaterial")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("MainMaterialId")
                        .HasConstraintName("fk_employee_certificate_main_materials_main_materials_main_mate~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateShieldingGas", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", "Certificate")
                        .WithMany("ShieldingGases")
                        .HasForeignKey("EmployeeCertificateId")
                        .HasConstraintName("fk_employee_certificate_shielding_gases_employee_certificates_~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.ShieldingGas", "ShieldingGas")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("ShieldingGasId")
                        .HasConstraintName("fk_employee_certificate_shielding_gases_shielding_gases_shieldi~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateWeldType", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", "Certificate")
                        .WithMany("WeldTypes")
                        .HasForeignKey("EmployeeCertificateId")
                        .HasConstraintName("fk_employee_certificate_weld_types_employee_certificates_emplo~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.WeldType", "WeldType")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("WeldTypeId")
                        .HasConstraintName("fk_employee_certificate_weld_types_weld_types_weld_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateWeldingMaterial", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", "Certificate")
                        .WithMany("WeldingMaterials")
                        .HasForeignKey("EmployeeCertificateId")
                        .HasConstraintName("fk_employee_certificate_welding_materials_employee_certificate~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.WeldingMaterial", "WeldingMaterial")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("WeldingMaterialId")
                        .HasConstraintName("fk_employee_certificate_welding_materials_welding_materials_wel~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateWeldingPosition", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", "Certificate")
                        .WithMany("WeldingPositions")
                        .HasForeignKey("EmployeeCertificateId")
                        .HasConstraintName("fk_employee_certificate_welding_positions_employee_certificate~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.WeldingPosition", "WeldingPosition")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("WeldingPositionId")
                        .HasConstraintName("fk_employee_certificate_welding_positions_welding_positions_wel~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateWeldingProcess", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", "Certificate")
                        .WithMany("WeldingProcesses")
                        .HasForeignKey("EmployeeCertificateId")
                        .HasConstraintName("fk_employee_certificate_welding_processes_employee_certificate~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.WeldingProcess", "Process")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("WeldingProcessId")
                        .HasConstraintName("fk_employee_certificate_welding_processes_welding_processes_wel~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificateWeldingTechnique", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.EmployeeCertificate", "Certificate")
                        .WithMany("WeldingTechniques")
                        .HasForeignKey("EmployeeCertificateId")
                        .HasConstraintName("fk_employee_certificate_welding_techniques_employee_certificat~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.WeldType", "WeldType")
                        .WithMany("EmployeeCertificatesWeldingTechniqueWeldTypes")
                        .HasForeignKey("WeldTypeId")
                        .HasConstraintName("fk_employee_certificate_welding_techniques_weld_types_weld_type~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.WeldingTechnique", "WeldingTechnique")
                        .WithMany("EmployeeCertificates")
                        .HasForeignKey("WeldingTechniqueId")
                        .HasConstraintName("fk_employee_certificate_welding_techniques_welding_techniques_w~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.Measurement", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.ProductDomain.Run", "Run")
                        .WithMany("Measurements")
                        .HasForeignKey("RunId")
                        .HasConstraintName("fk_measurements_runs_run_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.Product", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.Organization", "Organization")
                        .WithMany("Products")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_products_organizations_organization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.Run", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.ProductDomain.WeldingTaskWelder", "EmployeeWeldingTask")
                        .WithMany("Runs")
                        .HasForeignKey("EmployeeWeldingTaskId")
                        .HasConstraintName("fk_runs_welding_task_welders_employee_welding_task_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.Weld", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.ProductDomain.Product", "Product")
                        .WithMany("Welds")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_welds_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.WeldingTask", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.WeldingMachineDomain.WeldingMachine", "WeldingMachine")
                        .WithMany("WeldingTasks")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("fk_welding_tasks_welding_machines_equipment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.Employee", "Master")
                        .WithMany("CreatedWeldingTasks")
                        .HasForeignKey("MasterId")
                        .HasConstraintName("fk_welding_tasks_employees_master_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.ProductDomain.Weld", "Weld")
                        .WithMany("WeldingTasks")
                        .HasForeignKey("WeldId")
                        .HasConstraintName("fk_welding_tasks_welds_weld_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.WeldingInstructionDomain.WeldingInstruction", "WeldingInstruction")
                        .WithMany("WeldingTasks")
                        .HasForeignKey("WeldingInstructionId")
                        .HasConstraintName("fk_welding_tasks_welding_instructions_welding_instruction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.ProductDomain.WeldingTaskWelder", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.EmployeeDomain.Employee", "Welder")
                        .WithMany("WeldingTasks")
                        .HasForeignKey("WelderId")
                        .HasConstraintName("fk_welding_task_welders_employees_welder_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.ProductDomain.WeldingTask", "WeldingTask")
                        .WithMany("Welders")
                        .HasForeignKey("WeldingTaskId")
                        .HasConstraintName("fk_welding_task_welders_welding_tasks_welding_task_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingInstructionDomain.WeldParams", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.AdditionalMaterial", "AdditionalMaterial")
                        .WithMany("WeldParams")
                        .HasForeignKey("AdditionalMaterialId")
                        .HasConstraintName("fk_weld_params_additional_materials_additional_material_id");

                    b.HasOne("WeldingControl.Data.Domain.ConnectionForm", "ConnectionForm")
                        .WithMany("WeldParams")
                        .HasForeignKey("ConnectionFormId")
                        .HasConstraintName("fk_weld_params_connection_forms_connection_form_id");

                    b.HasOne("WeldingControl.Data.Domain.FillerMaterial", "FillerMaterial")
                        .WithMany("WeldParams")
                        .HasForeignKey("FillerMaterialId")
                        .HasConstraintName("fk_weld_params_filler_materials_filler_material_id");

                    b.HasOne("WeldingControl.Data.Domain.MainMaterial", "MainMaterial")
                        .WithMany("WeldParams")
                        .HasForeignKey("MainMaterialId")
                        .HasConstraintName("fk_weld_params_main_materials_main_material_id");

                    b.HasOne("WeldingControl.Data.Domain.ShieldingGas", "ShieldingGas")
                        .WithMany("WeldParams")
                        .HasForeignKey("ShieldingGasId")
                        .HasConstraintName("fk_weld_params_shielding_gases_shielding_gas_id");

                    b.HasOne("WeldingControl.Data.Domain.WeldType", "WeldType")
                        .WithMany("WeldParams")
                        .HasForeignKey("WeldTypeId")
                        .HasConstraintName("fk_weld_params_weld_types_weld_type_id");

                    b.HasOne("WeldingControl.Data.Domain.WeldingInstructionDomain.WeldingInstruction", "WeldingInstruction")
                        .WithMany("WeldParams")
                        .HasForeignKey("WeldingInstructionId")
                        .HasConstraintName("fk_weld_params_welding_instructions_welding_instruction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.WeldingMaterial", "WeldingMaterial")
                        .WithMany("WeldParams")
                        .HasForeignKey("WeldingMaterialId")
                        .HasConstraintName("fk_weld_params_welding_materials_welding_material_id");

                    b.HasOne("WeldingControl.Data.Domain.WeldingPosition", "WeldingPosition")
                        .WithMany("WeldParams")
                        .HasForeignKey("WeldingPositionId")
                        .HasConstraintName("fk_weld_params_welding_positions_welding_position_id");

                    b.HasOne("WeldingControl.Data.Domain.WeldingProcess", "WeldingProcess")
                        .WithMany("WeldParams")
                        .HasForeignKey("WeldingProcessId")
                        .HasConstraintName("fk_weld_params_welding_processes_welding_process_id");

                    b.HasOne("WeldingControl.Data.Domain.WeldingTechnique", null)
                        .WithMany("WeldParams")
                        .HasForeignKey("WeldingTechniqueId")
                        .HasConstraintName("fk_weld_params_welding_techniques_welding_technique_id");

                    b.OwnsOne("WeldingControl.Data.Domain.Utility.Param", "Current", b1 =>
                        {
                            b1.Property<int>("WeldParamsId")
                                .HasColumnName("id")
                                .HasColumnType("Integer");

                            b1.Property<double?>("Max")
                                .HasColumnName("current_max")
                                .HasColumnType("double precision");

                            b1.Property<double>("Min")
                                .HasColumnName("current_min")
                                .HasColumnType("double precision");

                            b1.HasKey("WeldParamsId")
                                .HasName("pk_weld_params");

                            b1.ToTable("weld_params");

                            b1.WithOwner()
                                .HasForeignKey("WeldParamsId")
                                .HasConstraintName("fk_weld_params_weld_params_id");

                            b1.HasData(
                                new
                                {
                                    WeldParamsId = 1,
                                    Max = 500.0,
                                    Min = 0.0
                                });
                        });

                    b.OwnsOne("WeldingControl.Data.Domain.Utility.Param", "PipeOuterDiameter", b1 =>
                        {
                            b1.Property<int>("WeldParamsId")
                                .HasColumnName("id")
                                .HasColumnType("Integer");

                            b1.Property<double?>("Max")
                                .HasColumnName("pipe_outer_diameter_max")
                                .HasColumnType("double precision");

                            b1.Property<double>("Min")
                                .HasColumnName("pipe_outer_diameter_min")
                                .HasColumnType("double precision");

                            b1.HasKey("WeldParamsId")
                                .HasName("pk_weld_params");

                            b1.ToTable("weld_params");

                            b1.WithOwner()
                                .HasForeignKey("WeldParamsId")
                                .HasConstraintName("fk_weld_params_weld_params_id");

                            b1.HasData(
                                new
                                {
                                    WeldParamsId = 1,
                                    Max = 40.0,
                                    Min = 40.0
                                });
                        });

                    b.OwnsOne("WeldingControl.Data.Domain.Utility.Param", "Thickness", b1 =>
                        {
                            b1.Property<int>("WeldParamsId")
                                .HasColumnName("id")
                                .HasColumnType("Integer");

                            b1.Property<double?>("Max")
                                .HasColumnName("thickness_max")
                                .HasColumnType("double precision");

                            b1.Property<double>("Min")
                                .HasColumnName("thickness_min")
                                .HasColumnType("double precision");

                            b1.HasKey("WeldParamsId")
                                .HasName("pk_weld_params");

                            b1.ToTable("weld_params");

                            b1.WithOwner()
                                .HasForeignKey("WeldParamsId")
                                .HasConstraintName("fk_weld_params_weld_params_id");

                            b1.HasData(
                                new
                                {
                                    WeldParamsId = 1,
                                    Max = 6.0,
                                    Min = 6.0
                                });
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingInstructionDomain.WeldingInstruction", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.Organization", "Organization")
                        .WithMany("WeldingInstructions")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_welding_instructions_organizations_organization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingMachineDomain.WeldingMachine", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.Organization", "Organization")
                        .WithMany("WeldingMachines")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_welding_machines_organizations_organization_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.WeldingMachineDomain.Recorder", "Recorder")
                        .WithMany()
                        .HasForeignKey("RecorderId")
                        .HasConstraintName("fk_welding_machines_recorders_recorder_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingMachineDomain.WeldingMode", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.WeldingMachineDomain.WeldingMachine", "WeldingMachine")
                        .WithMany("Modes")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("fk_welding_modes_welding_machines_equipment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeldingControl.Data.Domain.WeldingProcess", "WeldingProcess")
                        .WithMany("WeldingModes")
                        .HasForeignKey("WeldingProcessId")
                        .HasConstraintName("fk_welding_modes_welding_processes_welding_process_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WeldingControl.Data.Domain.Utility.Param", "Current", b1 =>
                        {
                            b1.Property<int>("WeldingModeId")
                                .HasColumnName("id")
                                .HasColumnType("Integer");

                            b1.Property<double?>("Max")
                                .HasColumnName("current_max")
                                .HasColumnType("double precision");

                            b1.Property<double>("Min")
                                .HasColumnName("current_min")
                                .HasColumnType("double precision");

                            b1.HasKey("WeldingModeId")
                                .HasName("pk_welding_modes");

                            b1.ToTable("welding_modes");

                            b1.WithOwner()
                                .HasForeignKey("WeldingModeId")
                                .HasConstraintName("fk_welding_modes_welding_modes_id");

                            b1.HasData(
                                new
                                {
                                    WeldingModeId = 1,
                                    Max = 500.0,
                                    Min = 0.0
                                });
                        });
                });

            modelBuilder.Entity("WeldingControl.Data.Domain.WeldingPosition", b =>
                {
                    b.HasOne("WeldingControl.Data.Domain.ConnectionForm", "ConnectionForm")
                        .WithMany("WeldingPositions")
                        .HasForeignKey("ConnectionFormId")
                        .HasConstraintName("fk_welding_positions_connection_forms_connection_form_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
